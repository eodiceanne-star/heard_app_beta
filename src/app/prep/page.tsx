'use client'
import React, { useState, useEffect } from 'react'
import Navigation from '@/components/Navigation'
import Illustration from '@/components/Illustration'
import prepData from '@/data/appointmentPrep.json'

interface Question {
  id: string
  text: string
  category: string
  isCustom: boolean
}

export default function PrepPage() {
  const [customQuestions, setCustomQuestions] = useState<Question[]>([])
  const [newQuestion, setNewQuestion] = useState('')
  const [selectedCategory, setSelectedCategory] = useState('all')

  const defaultQuestions: Question[] = prepData.defaultQuestions.map((q, index) => ({
    id: `default-${index}`,
    text: q,
    category: 'Guided Questions',
    isCustom: false
  }))

  const categories = [
    { id: 'all', name: 'All Questions' },
    { id: 'Guided Questions', name: 'Guided Questions' },
    { id: 'Diagnosis & Understanding', name: 'Diagnosis & Understanding' },
    { id: 'Treatment & Management', name: 'Treatment & Management' },
    { id: 'Monitoring & Follow-up', name: 'Monitoring & Follow-up' },
    { id: 'Custom', name: 'My Questions' }
  ]

  useEffect(() => {
    const saved = localStorage.getItem('heardCustomQuestions')
    if (saved) {
      setCustomQuestions(JSON.parse(saved))
    }
  }, [])

  useEffect(() => {
    localStorage.setItem('heardCustomQuestions', JSON.stringify(customQuestions))
  }, [customQuestions])

  const handleAddQuestion = (e: React.FormEvent) => {
    e.preventDefault()
    if (!newQuestion.trim()) return

    const question: Question = {
      id: Date.now().toString(),
      text: newQuestion,
      category: 'Custom',
      isCustom: true
    }

    setCustomQuestions([question, ...customQuestions])
    setNewQuestion('')
  }

  const handleRemoveQuestion = (id: string) => {
    setCustomQuestions(customQuestions.filter(q => q.id !== id))
  }

  const exportToFile = () => {
    const allQuestions = [...defaultQuestions, ...customQuestions]
    const filteredQuestions = selectedCategory === 'all'
      ? allQuestions
      : allQuestions.filter(q => q.category === selectedCategory)

    const content = `Doctor Visit Preparation Questions\n\n${filteredQuestions.map((q, index) => `${index + 1}. ${q.text}`).join('\n')}\n\nGenerated by Heard App - Your Healthcare Support Platform`

    const blob = new Blob([content], { type: 'text/plain' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = 'doctor-visit-questions.txt'
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  const allQuestions = [...defaultQuestions, ...customQuestions]
  const filteredQuestions = selectedCategory === 'all'
    ? allQuestions
    : allQuestions.filter(q => q.category === selectedCategory)

  return (
    <div className="page-container relative">
      {/* Background decorative elements */}
      <Illustration type="wave-pattern" className="pointer-events-none" />
      <Illustration type="dot-pattern" className="pointer-events-none" />

      <div className="content-container relative z-10">
        <div className="mb-12">
          <Illustration type="appointment-prep" size="large" className="mb-6" />
        </div>

        <h1 className="text-5xl font-playfair font-semibold text-charcoal text-center mb-3">Doctor Visit Prep</h1>
        <p className="text-xl text-lato text-charcoal text-center mb-12 leading-relaxed">
          Prepare for your appointments with guided questions designed to help you advocate for yourself
        </p>

        <div className="mobile-card mb-8 relative overflow-hidden">
          {/* Card background pattern */}
          <div className="absolute top-0 right-0 w-16 h-16 bg-gradient-to-br from-dusty-pink to-transparent opacity-10 rounded-full -mr-8 -mt-8"></div>

          <h2 className="text-3xl font-playfair font-medium text-charcoal mb-6 relative z-10">Add Your Own Question</h2>
          <form onSubmit={handleAddQuestion} className="space-y-6 relative z-10">
            <div>
              <label className="block text-lg font-medium text-charcoal mb-3">Your Question</label>
              <textarea
                value={newQuestion}
                onChange={(e) => setNewQuestion(e.target.value)}
                className="w-full p-4 border border-gray-200 rounded-2xl focus:ring-2 focus:ring-dusty-pink focus:border-transparent text-base"
                rows={4}
                placeholder="Type your question here..."
                maxLength={200}
              />
              <div className="text-sm text-gray-500 mt-2">{newQuestion.length}/200</div>
            </div>
            <button type="submit" className="mobile-button w-full text-lg py-4">
              Add Question
            </button>
          </form>
        </div>

        <div className="mobile-card mb-8 relative overflow-hidden">
          {/* Card background pattern */}
          <div className="absolute top-0 left-0 w-12 h-12 bg-gradient-to-br from-sage to-transparent opacity-10 rounded-full -ml-6 -mt-6"></div>

          <div className="space-y-4 relative z-10">
            <div>
              <label className="block text-lg font-medium text-charcoal mb-3">Filter by Category</label>
              <select
                value={selectedCategory}
                onChange={(e) => setSelectedCategory(e.target.value)}
                className="w-full p-4 border border-gray-200 rounded-2xl focus:ring-2 focus:ring-dusty-pink focus:border-transparent text-base"
              >
                {categories.map(category => (
                  <option key={category.id} value={category.id}>{category.name}</option>
                ))}
              </select>
            </div>

            {filteredQuestions.length > 0 && (
              <button
                onClick={exportToFile}
                className="mobile-button w-full text-lg py-4"
              >
                Export Questions
              </button>
            )}
          </div>
        </div>

        <div className="space-y-6">
          {filteredQuestions.map((question, index) => (
            <div key={question.id} className="mobile-card relative overflow-hidden">
              {/* Card background pattern */}
              <div className="absolute top-0 right-0 w-8 h-8 bg-gradient-to-br from-sage to-transparent opacity-10 rounded-full -mr-4 -mt-4"></div>

              <div className="flex items-start justify-between relative z-10">
                <div className="flex-1">
                  <div className="flex items-center space-x-3 mb-3">
                    <span className="px-3 py-1 bg-dusty-pink bg-opacity-20 text-dusty-pink text-sm rounded-full font-medium">
                      {question.category}
                    </span>
                    {question.isCustom && (
                      <span className="px-3 py-1 bg-sage bg-opacity-20 text-sage text-sm rounded-full font-medium">
                        Custom
                      </span>
                    )}
                  </div>
                  <p className="text-base text-charcoal leading-relaxed">{question.text}</p>
                </div>
                {question.isCustom && (
                  <button
                    onClick={() => handleRemoveQuestion(question.id)}
                    className="ml-4 text-gray-400 hover:text-red-500 transition-colors"
                  >
                    âœ•
                  </button>
                )}
              </div>
            </div>
          ))}
        </div>

        <div className="mt-12 p-8 bg-gradient-to-br from-sage to-dusty-pink bg-opacity-10 rounded-3xl relative overflow-hidden">
          {/* Background decorative elements */}
          <div className="absolute top-4 right-4">
            <Illustration type="plant-decorative" size="small" />
          </div>

          <h3 className="text-2xl font-playfair font-medium text-charcoal mb-4 relative z-10">Tips for Your Appointment</h3>
          <div className="space-y-3 text-base text-charcoal leading-relaxed relative z-10">
            <div className="flex items-start space-x-3">
              <div className="w-2 h-2 bg-sage rounded-full mt-2 flex-shrink-0"></div>
              <p>Bring this list of questions to your appointment</p>
            </div>
            <div className="flex items-start space-x-3">
              <div className="w-2 h-2 bg-sage rounded-full mt-2 flex-shrink-0"></div>
              <p>Take notes during your visit</p>
            </div>
            <div className="flex items-start space-x-3">
              <div className="w-2 h-2 bg-sage rounded-full mt-2 flex-shrink-0"></div>
              <p>Don't be afraid to ask for clarification</p>
            </div>
            <div className="flex items-start space-x-3">
              <div className="w-2 h-2 bg-sage rounded-full mt-2 flex-shrink-0"></div>
              <p>Remember: You know your body best</p>
            </div>
            <div className="flex items-start space-x-3">
              <div className="w-2 h-2 bg-sage rounded-full mt-2 flex-shrink-0"></div>
              <p>If you feel dismissed, consider seeking a second opinion</p>
            </div>
          </div>
        </div>
      </div>
      <Navigation />
    </div>
  )
}
