'use client'

import React, { useState, useEffect } from 'react'
import Navigation from '@/components/Navigation'
import Illustration from '@/components/Illustration'
import prepData from '@/data/appointmentPrep.json'

interface Question {
  id: string
  text: string
  isCustom: boolean
}

export default function PrepPage() {
  const [customQuestions, setCustomQuestions] = useState<Question[]>([])
  const [newQuestion, setNewQuestion] = useState('')
  const [selectedCategory, setSelectedCategory] = useState('all')

  const defaultQuestions: Question[] = prepData.defaultQuestions.map((q, index) => ({
    id: `default-${index}`,
    text: q,
    isCustom: false
  }))

  const categories = [
    { id: 'all', name: 'All Questions' },
    ...prepData.categories
  ]

  // Load custom questions from localStorage
  useEffect(() => {
    const savedQuestions = localStorage.getItem('customPrepQuestions')
    if (savedQuestions) {
      setCustomQuestions(JSON.parse(savedQuestions))
    }
  }, [])

  // Save custom questions to localStorage
  useEffect(() => {
    localStorage.setItem('customPrepQuestions', JSON.stringify(customQuestions))
  }, [customQuestions])

  const handleAddQuestion = (e: React.FormEvent) => {
    e.preventDefault()
    if (newQuestion.trim()) {
      const question: Question = {
        id: Date.now().toString(),
        text: newQuestion.trim(),
        isCustom: true
      }
      setCustomQuestions([...customQuestions, question])
      setNewQuestion('')
    }
  }

  const handleRemoveQuestion = (id: string) => {
    setCustomQuestions(customQuestions.filter(q => q.id !== id))
  }

  const allQuestions = [...defaultQuestions, ...customQuestions]

  const filteredQuestions = selectedCategory === 'all' 
    ? allQuestions 
    : allQuestions.filter(q => {
        const category = prepData.categories.find(c => c.id === selectedCategory)
        return category ? category.questions.includes(q.text) : true
      })

  const exportToFile = () => {
    const content = `Appointment Preparation Questions

${filteredQuestions.map((q, index) => `${index + 1}. ${q.text}`).join('\n')}

---
Generated by Heard - Your Healthcare Support Platform
Date: ${new Date().toLocaleDateString()}
`
    
    const blob = new Blob([content], { type: 'text/plain' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = 'appointment-prep-questions.txt'
    a.click()
    URL.revokeObjectURL(url)
  }

  return (
    <div className="page-container">
      <div className="content-container">
        {/* Illustration */}
        <div className="mb-8">
          <Illustration type="conversation" />
        </div>

        {/* Heading */}
        <h1 className="text-4xl font-playfair font-semibold text-charcoal text-center mb-6">
          Doctor Visit Prep
        </h1>

        {/* Add Custom Question */}
        <div className="bg-white rounded-2xl p-6 shadow-sm mb-6">
          <h2 className="text-2xl font-playfair font-medium text-charcoal mb-4">
            Add Your Own Question
          </h2>
          <form onSubmit={handleAddQuestion} className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-charcoal mb-2">
                Question
              </label>
              <textarea
                value={newQuestion}
                onChange={(e) => setNewQuestion(e.target.value)}
                placeholder="What would you like to ask your doctor?"
                className="w-full p-3 border border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-dusty-pink focus:border-transparent resize-none"
                rows={3}
              />
            </div>
            <button
              type="submit"
              className="w-full bg-dusty-pink text-white py-3 rounded-xl font-medium hover:bg-opacity-90 transition-colors duration-200"
            >
              Add Question
            </button>
          </form>
        </div>

        {/* Category Filter */}
        <div className="mb-6">
          <label className="block text-sm font-medium text-charcoal mb-2">
            Filter by Category
          </label>
          <select
            value={selectedCategory}
            onChange={(e) => setSelectedCategory(e.target.value)}
            className="w-full p-3 border border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-dusty-pink focus:border-transparent"
          >
            {categories.map(category => (
              <option key={category.id} value={category.id}>
                {category.name}
              </option>
            ))}
          </select>
        </div>

        {/* Export Button */}
        {filteredQuestions.length > 0 && (
          <div className="mb-6">
            <button
              onClick={exportToFile}
              className="w-full bg-sage text-white py-3 rounded-xl font-medium hover:bg-opacity-90 transition-colors duration-200"
            >
              Export Questions
            </button>
          </div>
        )}

        {/* Questions List */}
        <div className="space-y-4">
          <div className="flex justify-between items-center">
            <h2 className="text-2xl font-playfair font-medium text-charcoal">
              Preparation Questions
            </h2>
            <span className="text-sm text-gray-600">
              {filteredQuestions.length} questions
            </span>
          </div>
          
          {filteredQuestions.map((question, index) => (
            <div key={question.id} className="bg-white rounded-2xl p-4 shadow-sm">
              <div className="flex justify-between items-start">
                <div className="flex-1">
                  <p className="text-charcoal">
                    <span className="font-medium text-dusty-pink mr-2">
                      {index + 1}.
                    </span>
                    {question.text}
                  </p>
                  {question.isCustom && (
                    <span className="inline-block bg-sage bg-opacity-20 text-sage text-xs px-2 py-1 rounded-full mt-2">
                      Your Question
                    </span>
                  )}
                </div>
                {question.isCustom && (
                  <button
                    onClick={() => handleRemoveQuestion(question.id)}
                    className="text-red-500 hover:text-red-700 transition-colors duration-200 ml-2"
                  >
                    üóëÔ∏è
                  </button>
                )}
              </div>
            </div>
          ))}
        </div>

        {/* Tips */}
        <div className="mt-8 p-6 bg-dusty-pink bg-opacity-10 rounded-2xl">
          <h3 className="text-lg font-playfair font-medium text-charcoal mb-3">
            üí° Tips for Your Appointment
          </h3>
          <ul className="text-sm text-charcoal space-y-2">
            <li>‚Ä¢ Write down your questions before you go</li>
            <li>‚Ä¢ Bring a list of your current medications</li>
            <li>‚Ä¢ Don't be afraid to ask for clarification</li>
            <li>‚Ä¢ Trust your instincts - you know your body best</li>
            <li>‚Ä¢ Consider bringing a friend or family member for support</li>
          </ul>
        </div>
      </div>
      
      <Navigation />
    </div>
  )
}
